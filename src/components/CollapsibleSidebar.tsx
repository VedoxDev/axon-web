import React, { useState, useCallback, useEffect } from 'react';
import { useSidebar, useNavigation } from '../contexts/LayoutContext';
import { useAlert } from '../hooks/useAlert';
import projectService, { type Project, type ProjectDetails } from '../services/projectService';
import announcementService, { type Announcement } from '../services/announcementService';
import ChatConversationList from './ChatConversationList';
import CreateProjectModal from './CreateProjectModal';
import ProjectMembersModal from './modals/ProjectMembersModal';
import InviteMembersModal from './modals/InviteMembersModal';

interface SidebarSection {
  id: string;
  title: string;
  sectionIcon: React.ReactNode;
}

interface Member {
  id: string;
  name: string;
  avatar: string;
  status: 'online' | 'offline' | 'away';
}

// Local project type for UI consistency
interface UIProject {
  id: string;
  name: string;
  color: string;
  role?: 'owner' | 'admin' | 'member';
}

const CollapsibleSidebar: React.FC = () => {
  const { selectedItem, selectItem, setCurrentProject, currentProjectId } = useSidebar();
  const { selectedChatId, selectChat } = useNavigation();
  const { showError } = useAlert();
  
  const [isProjectMenuOpen, setIsProjectMenuOpen] = useState(false);
  const [selectedProject, setSelectedProject] = useState<UIProject>({
    id: 'chat',
    name: 'Mensajes',
    color: 'from-blue-500 to-indigo-600'
  });
  const [isMembersOpen, setIsMembersOpen] = useState(false);
  const [isGeneralChat, setIsGeneralChat] = useState(false);
  const [projects, setProjects] = useState<UIProject[]>([]);
  const [projectDetails, setProjectDetails] = useState<ProjectDetails | null>(null);
  const [isLoadingProjects, setIsLoadingProjects] = useState(true);
  const [isLoadingDetails, setIsLoadingDetails] = useState(false);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [isInviteModalOpen, setIsInviteModalOpen] = useState(false);
  const [currentUserId, setCurrentUserId] = useState<string | undefined>(undefined);
  const [latestAnnouncement, setLatestAnnouncement] = useState<Announcement | null>(null);
  const [isLoadingAnnouncement, setIsLoadingAnnouncement] = useState(false);

  // Load user's projects and current user on component mount
  useEffect(() => {
    loadProjects();
    loadCurrentUser();
    // Default to chat - this will show the chat conversation list
    selectItem('chat');
  }, [selectItem]);

  const loadCurrentUser = async () => {
    try {
      const user = await projectService.getCurrentUser();
      setCurrentUserId(user.id);
    } catch (error) {
      console.error('Failed to load current user:', error);
    }
  };

  // Load project details when selected project changes
  useEffect(() => {
    if (selectedProject.id !== 'chat' && 
        selectedProject.id !== 'loading' && 
        selectedProject.id !== 'no-projects' && 
        selectedProject.id !== 'error' && 
        selectedProject.id) {
      loadProjectDetails(selectedProject.id);
    }
  }, [selectedProject.id]);

  // Sync selectedProject with global selectedItem state
  useEffect(() => {
    if (selectedItem === 'chat' && selectedProject.id !== 'chat') {
      // Global state switched to chat, update local state
      setSelectedProject({
        id: 'chat',
        name: 'Mensajes',
        color: 'from-blue-500 to-indigo-600'
      });
    }
  }, [selectedItem, selectedProject.id]);

  const loadProjects = async () => {
    try {
      setIsLoadingProjects(true);
      const userProjects = await projectService.getUserProjects();
      
      // Convert API projects to UI projects
      const uiProjects: UIProject[] = userProjects.map(project => ({
        id: project.id,
        name: project.name,
        color: '', // Will be generated by getProjectColor
        role: project.role
      }));

      setProjects(uiProjects);

      // Keep chat as default - don't auto-select projects
      // Users can manually choose to switch to a project if they want
    } catch (error: any) {
      showError(error.message, 'Error al cargar proyectos');
      // Keep chat selected even on error
    } finally {
      setIsLoadingProjects(false);
    }
  };

  const loadProjectDetails = async (projectId: string) => {
    try {
      setIsLoadingDetails(true);
      const details = await projectService.getProjectDetails(projectId);
      setProjectDetails(details);
      
      // Also load latest announcement
      loadLatestAnnouncement(projectId);
    } catch (error: any) {
      showError(error.message, 'Error al cargar detalles del proyecto');
      setProjectDetails(null);
    } finally {
      setIsLoadingDetails(false);
    }
  };

  const loadLatestAnnouncement = async (projectId: string) => {
    try {
      setIsLoadingAnnouncement(true);
      const announcements = await announcementService.getProjectAnnouncements(projectId);
      
      // Get the most recent announcement (announcements should be ordered by date)
      const latest = announcements.length > 0 ? announcements[0] : null;
      setLatestAnnouncement(latest);
    } catch (error: any) {
      // Don't show error for announcements since it's not critical
      console.error('Error loading latest announcement:', error);
      setLatestAnnouncement(null);
    } finally {
      setIsLoadingAnnouncement(false);
    }
  };

  // Convert project members to UI members format
  const members: Member[] = React.useMemo(() => {
    if (!projectDetails?.members) return [];
    
    return projectDetails.members.map(member => ({
      id: member.id,
      name: `${member.nombre} ${member.apellidos}`,
      avatar: `${member.nombre.charAt(0)}${member.apellidos.charAt(0)}`.toUpperCase(),
      status: member.status === 'active' ? 'online' : 'offline'
    }));
  }, [projectDetails]);

  const handleItemClick = useCallback((itemId: string) => {
    // Don't change the selected project, just navigate within it
    selectItem(itemId);
  }, [selectItem]);

  const handleProjectSelect = useCallback((project: UIProject) => {
    setSelectedProject(project);
    setIsProjectMenuOpen(false);
    
    if (project.id === 'chat') {
      // Going back to global chat
      setCurrentProject(null);
      selectItem('chat');
      // Clear project-specific data
      setLatestAnnouncement(null);
      setProjectDetails(null);
    } else {
      // Selecting a project - set project context and default to project chat
      setCurrentProject(project.id);
      selectItem('general-chat'); // Default to project chat when selecting a project
      // Set the project's group chat as selected
      selectChat(project.id); // Use project ID as the group chat ID
    }
  }, [setCurrentProject, selectItem, selectChat]);

  const handleChatSelect = useCallback((chatId: string | null) => {
    selectChat(chatId);
  }, [selectChat]);

  const menuSections: SidebarSection[] = [
    {
      id: "tasks",
      title: "Tareas",
      sectionIcon: (
        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
        </svg>
      ),
    },
    {
      id: "general-chat",
      title: "Chat",
      sectionIcon: (
        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
        </svg>
      ),
    },
    {
      id: "calendar",
      title: "Itinerario",
      sectionIcon: (
        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
        </svg>
      ),
    },
    {
      id: "announcements",
      title: "Anuncios",
      sectionIcon: (
        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5.882V19.24a1.76 1.76 0 01-3.417.592l-2.147-6.15M18 13a3 3 0 100-6M5.436 13.683A4.001 4.001 0 017 6h1.832c4.1 0 7.625-1.234 9.168-3v14c-1.543-1.766-5.067-3-9.168-3H7a3.988 3.988 0 01-1.564-.317z" />
        </svg>
      ),
    },
  ];

  // Discord-style project bar
  const getProjectColor = (project: UIProject) => {
    const colors = [
      '#FFB3BA', // Light pink
      '#BAFFC9', // Light green  
      '#BAE1FF', // Light blue
      '#FFFFBA', // Light yellow
      '#FFDFBA', // Light orange
      '#E1BAFF', // Light purple
      '#FFCCCB', // Light coral
      '#B3E5D1', // Light mint
      '#D4EDDA', // Light sage
      '#F8F9FA', // Light gray
    ];
    
    // Use project name hash for consistent colors
    let hash = 0;
    for (let i = 0; i < project.name.length; i++) {
      hash = project.name.charCodeAt(i) + ((hash << 5) - hash);
    }
    return colors[Math.abs(hash) % colors.length];
  };

  return (
    <div className="flex h-full">
      {/* Discord-style vertical project bar */}
      <div className="w-16 bg-[#151718] flex flex-col items-center h-full">
        {/* Fixed Chat Button at Top */}
        <div className="flex-shrink-0 pt-3 pb-2">
          <div className="relative group">
            <div 
              className={`w-12 h-12 rounded-full bg-gradient-to-br from-blue-500 to-indigo-600 flex items-center justify-center cursor-pointer transition-all duration-150 ease-out ${
                selectedProject.id === 'chat' ? 'rounded-lg ring-4 ring-orange-500 ring-opacity-50' : ''
              }`}
              onClick={() => {
                setSelectedProject({id: 'chat', name: 'Chat', color: 'from-blue-500 to-indigo-600'});
                selectItem('chat');
              }}
            >
              <svg className="w-6 h-6" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="white">
                <path d="M76.83,480a25.69,25.69,0,0,1-25.57-25.74,29.13,29.13,0,0,1,1.2-7.63L70.88,380c.77-2.46-.1-4.94-1.23-6.9l-.22-.4c-.08-.13-.46-.66-.73-1.05s-.58-.81-.86-1.22l-.19-.27A215.66,215.66,0,0,1,32,251.37c-.18-57.59,22.35-112,63.46-153.28C138,55.47,194.9,32,255.82,32A227.4,227.4,0,0,1,398,81.84c39.45,31.75,66.87,76,77.21,124.68a213.5,213.5,0,0,1,4.78,45c0,58.93-22.64,114.28-63.76,155.87-41.48,42-97.18,65.06-156.83,65.06-21,0-47.87-5.36-60.77-9-15.52-4.34-30.23-10-31.85-10.6a15.12,15.12,0,0,0-5.37-1,14.75,14.75,0,0,0-5.8,1.15l-.85.33L87.28,477.71A29.44,29.44,0,0,1,76.83,480Zm-2-31.8ZM87.48,380h0Z"/>
              </svg>
            </div>
            {selectedProject.id === 'chat' && (
              <div className="absolute left-0 top-1/2 transform -translate-y-1/2 w-1 h-8 bg-white rounded-r-full -ml-2" />
            )}
            {/* Tooltip */}
            <div className="absolute left-16 top-1/2 transform -translate-y-1/2 bg-gray-800 text-white px-3 py-2 rounded-lg text-sm opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-50">
              Chat
            </div>
          </div>
        </div>

        {/* Separator */}
        <div className="w-8 h-px bg-gray-600 mb-2 flex-shrink-0"></div>

        {/* Scrollable Projects Container */}
        <div 
          className="flex-1 flex flex-col items-center space-y-2 overflow-y-auto px-2 pt-2 scrollbar-hide" 
          style={{ 
            scrollbarWidth: 'none', 
            msOverflowStyle: 'none'
          }}
        >
          {/* Loading State */}
          {isLoadingProjects && (
            <div className="w-12 h-12 rounded-full bg-gray-600 flex items-center justify-center">
              <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-white"></div>
            </div>
          )}

          {/* Project Icons */}
          {!isLoadingProjects && projects.map((project) => (
            <div key={project.id} className="relative group flex-shrink-0">
              <div 
                className={`w-12 h-12 rounded-full flex items-center justify-center cursor-pointer transition-all duration-150 ease-out overflow-hidden ${
                  selectedProject.id === project.id ? 'rounded-lg ring-4 ring-orange-500 ring-opacity-50' : ''
                }`}
                style={{ backgroundColor: getProjectColor(project) }}
                onClick={() => handleProjectSelect(project)}
              >
                <span className="font-bold text-xl" style={{ color: '#1a1a1a' }}>
                  {project.name.charAt(0).toUpperCase()}
                </span>
                {/* Role indicator */}
                {project.role === 'owner' && (
                  <div className="absolute -bottom-1 -right-1 w-4 h-4 flex items-center justify-center">
                    <svg className="w-4 h-4 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                    </svg>
                  </div>
                )}
                {project.role === 'admin' && (
                  <div className="absolute -bottom-1 -right-1 w-4 h-4 flex items-center justify-center">
                    <svg className="w-4 h-4 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M2.166 4.999A11.954 11.954 0 0010 1.944 11.954 11.954 0 0017.834 5c.11.65.166 1.32.166 2.001 0 5.225-3.34 9.67-8 11.317C5.34 16.67 2 12.225 2 7c0-.682.057-1.35.166-2.001zm11.541 3.708a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                    </svg>
                  </div>
                )}
              </div>
              {selectedProject.id === project.id && (
                <div className="absolute left-0 top-1/2 transform -translate-y-1/2 w-1 h-8 bg-white rounded-r-full -ml-2" />
              )}
              {/* Tooltip */}
              <div className="absolute left-16 top-1/2 transform -translate-y-1/2 bg-gray-800 text-white px-3 py-2 rounded-lg text-sm opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-50">
                <div className="font-medium">{project.name}</div>
                {project.role && (
                  <div className="text-xs text-gray-400">
                    {project.role === 'owner' ? 'Propietario' : 
                     project.role === 'admin' ? 'Colaborador' : 'Miembro'}
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>

        {/* Fixed Add Project Button at Bottom */}
        {!isLoadingProjects && (
          <div className="flex-shrink-0 pt-2 pb-3">
            <div className="relative group">
              <div 
                className="w-12 h-12 rounded-full bg-[#151718] border-2 border-dashed border-orange-500 flex items-center justify-center cursor-pointer transition-all duration-150 ease-out"
                onClick={() => setIsCreateModalOpen(true)}
              >
                <svg className="w-6 h-6 text-gray-400 hover:text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                </svg>
              </div>
              {/* Tooltip */}
              <div className="absolute left-16 top-1/2 transform -translate-y-1/2 bg-gray-800 text-white px-3 py-2 rounded-lg text-sm opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-50">
                Agregar Proyecto
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Main sidebar content */}
      <div className="h-full border border-gray-700 flex flex-col w-72 lg:w-80 min-w-0 relative flex-1" style={{height: '100vh', backgroundColor: '#3A3A3A'}}>
        {selectedProject.id === 'chat' ? (
          <ChatConversationList 
            selectedChatId={selectedChatId || null}
            onSelectChat={handleChatSelect}
          />
        ) : (
          <>
            {/* Sidebar Header */}
            <div className="flex flex-col border-b border-gray-700 flex-shrink-0 px-6">
              {/* Top Section: Logo and Title */}
              <div className="flex items-center justify-between py-4">
                {/* Logo and Title Area */}
                <div className="flex items-center space-x-3 min-w-0 flex-grow mr-4 relative">
                  <span className="w-10 h-10 rounded-lg flex items-center justify-center flex-shrink-0 transition-opacity font-bold text-base" style={{ backgroundColor: '#FF8C00', color: 'white' }}>
                    {selectedProject.name.charAt(0).toUpperCase()}
                  </span>
                  <div className="min-w-0 flex-1">
                    <span className="text-white font-semibold whitespace-nowrap overflow-hidden text-ellipsis text-lg block">
                      {selectedProject.name}
                    </span>
                    {selectedProject.role && (
                      <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium uppercase" style={{ backgroundColor: '#007AFF20', color: '#007AFF' }}>
                        {selectedProject.role === 'owner' ? 'Propietario' : 
                         selectedProject.role === 'admin' ? 'Colaborador' : 'Miembro'}
                      </span>
                    )}
                    {projectDetails?.description && (
                      <p className="text-xs text-gray-500 mt-1 line-clamp-2">
                        {projectDetails.description}
                      </p>
                    )}
                  </div>
                </div>
              </div>

              {/* Bottom Section: Members */}
              <div className="flex items-center justify-between pb-4 gap-2">
                <button
                  onClick={() => setIsMembersOpen(!isMembersOpen)}
                  className="flex items-center justify-between flex-1 bg-gray-700 bg-opacity-50 hover:bg-opacity-70 border border-gray-600 hover:border-gray-500 rounded-xl px-3 py-2 transition-all duration-200 group"
                >
                  <div className="flex items-center space-x-3">
                    <span className="text-sm font-medium text-gray-200">Miembros</span>
                    {members.length > 0 && !isLoadingDetails && (
                      <span className="text-xs text-gray-400">({members.length})</span>
                    )}
                  </div>
                  
                  {isLoadingDetails ? (
                    <div className="animate-pulse">
                      <div className="flex space-x-1">
                        <div className="w-6 h-6 bg-gray-600 rounded-full"></div>
                        <div className="w-6 h-6 bg-gray-600 rounded-full"></div>
                        <div className="w-6 h-6 bg-gray-600 rounded-full"></div>
                      </div>
                    </div>
                  ) : (
                    <div className="flex items-center">
                      {members.length === 0 ? (
                        <span className="text-xs text-gray-500">Sin miembros</span>
                      ) : (
                        <div className="flex items-center space-x-0.5">
                          {members.slice(0, 2).map((member, idx) => (
                            <div
                              key={member.id}
                              className="relative z-10 group/member"
                              style={{ marginLeft: idx === 0 ? 0 : '-0.7rem' }}
                            >
                              <div
                                className="w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium border border-gray-600"
                                style={{
                                  backgroundColor: '#007AFF',
                                  color: 'white'
                                }}
                              >
                                {member.avatar}
                              </div>
                              {/* Tooltip */}
                              <div className="absolute bottom-full mb-2 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white px-2 py-1 rounded text-xs opacity-0 group-hover/member:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-50">
                                {member.name}
                              </div>
                            </div>
                          ))}
                          {members.length > 2 && (
                            <div 
                              className="w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium -ml-3 relative z-20 border border-gray-600"
                              style={{
                                backgroundColor: '#007AFF',
                                color: 'white'
                              }}
                            >
                              {members.length - 2}+
                            </div>
                          )}
                        </div>
                      )}
                      {/* Arrow indicator */}
                      <svg className="w-4 h-4 text-gray-400 ml-2 group-hover:text-gray-300 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                      </svg>
                    </div>
                  )}
                </button>
                {/* Only show add members button for owners and admins */}
                {selectedProject.role && ['owner', 'admin'].includes(selectedProject.role) && (
                  <button
                    onClick={() => setIsInviteModalOpen(true)}
                    className="w-10 h-10 rounded-full flex items-center justify-center transition-all duration-200 hover:scale-105"
                    style={{
                      backgroundColor: '#FF8C0020',
                      border: '1px solid rgba(255, 140, 0, 0.3)'
                    }}
                  >
                    <svg className="w-5 h-5" fill="none" stroke="#FF8C00" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                    </svg>
                  </button>
                )}
              </div>
            </div>

            {/* Latest Announcement Box */}
            <div className="px-4 py-3">
              <div 
                className="rounded-xl p-4 cursor-pointer transition-all duration-200 hover:shadow-md border-l-4" 
                style={{ 
                  backgroundColor: '#282828',
                  borderLeftColor: latestAnnouncement 
                    ? latestAnnouncement.type === 'urgent' 
                      ? '#EF4444' 
                      : latestAnnouncement.type === 'warning'
                        ? '#F59E0B'
                        : latestAnnouncement.type === 'success'
                          ? '#10B981'
                          : '#3B82F6'
                    : '#6B7280'
                }}
                onClick={() => {
                  if (latestAnnouncement) {
                    handleItemClick('announcements');
                  }
                }}
              >
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center space-x-2">
                    <svg className="w-4 h-4 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5.882V19.24a1.76 1.76 0 01-3.417.592l-2.147-6.15M18 13a3 3 0 100-6M5.436 13.683A4.001 4.001 0 017 6h1.832c4.1 0 7.625-1.234 9.168-3v14c-1.543-1.766-5.067-3-9.168-3H7a3.988 3.988 0 01-1.564-.317z" />
                    </svg>
                    <span className="text-xs font-medium text-gray-300 uppercase tracking-wide">Último Anuncio</span>
                  </div>
                  {latestAnnouncement && !latestAnnouncement.isRead && (
                    <div className="w-2 h-2 bg-orange-400 rounded-full" title="No leído" />
                  )}
                </div>
                
                {isLoadingAnnouncement ? (
                  <div className="flex items-center space-x-2">
                    <div className="animate-spin w-4 h-4 border-2 border-orange-400 border-t-transparent rounded-full"></div>
                    <span className="text-sm text-gray-400">Cargando...</span>
                  </div>
                ) : latestAnnouncement ? (
                  <div>
                    <div className="flex items-center gap-2 mb-1">
                      <span className="text-sm">{announcementService.getAnnouncementTypeIcon(latestAnnouncement.type)}</span>
                      <h4 className="text-sm font-medium text-white line-clamp-1">
                        {latestAnnouncement.title}
                      </h4>
                      {latestAnnouncement.pinned && (
                        <span className="text-orange-400 text-xs">📌</span>
                      )}
                    </div>
                    <p className="text-xs text-gray-400 line-clamp-2 mb-2">
                      {latestAnnouncement.content}
                    </p>
                    <div className="flex items-center justify-between">
                      <span className="text-xs text-gray-500">
                        {latestAnnouncement.createdBy.fullName}
                      </span>
                      <span className="text-xs text-gray-500">
                        {announcementService.formatDate(latestAnnouncement.createdAt)}
                      </span>
                    </div>
                  </div>
                ) : (
                  <div className="text-sm text-gray-500">
                    No hay anuncios recientes
                  </div>
                )}
              </div>
            </div>

            {/* Menu Items */}
            <div className="flex-1 overflow-y-auto scrollbar-hide px-4 py-4 space-y-3">
              {menuSections.map((section) => {
                // Define colors for each section
                const getButtonColor = (id: string) => {
                  switch(id) {
                    case 'tasks': return '#007AFF';
                    case 'general-chat': return '#0066CB';
                    case 'calendar': return '#FDA400';
                    case 'announcements': return '#7F7F7F';
                    default: return '#007AFF';
                  }
                };

                return (
                  <button
                    key={section.id}
                    className={`flex items-center w-full px-4 py-3 rounded-xl cursor-pointer transition-all duration-200 ${
                      selectedItem === section.id
                        ? 'ring-2 ring-white ring-opacity-30 shadow-lg'
                        : 'hover:scale-105 hover:shadow-md'
                    }`}
                    style={{ 
                      backgroundColor: getButtonColor(section.id),
                      color: 'white'
                    }}
                    onClick={() => handleItemClick(section.id)}
                  >
                    <div className="flex items-center justify-center w-5 h-5 mr-3">
                      {section.sectionIcon}
                    </div>
                    <span className="text-sm font-medium">{section.title}</span>
                  </button>
                );
              })}
            </div>
          </>
        )}
      </div>

      {/* Create Project Modal */}
      <CreateProjectModal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        onProjectCreated={loadProjects}
      />

      {/* Project Members Modal */}
      <ProjectMembersModal
        isOpen={isMembersOpen}
        onClose={() => setIsMembersOpen(false)}
        members={projectDetails?.members || []}
        projectName={selectedProject.name}
        projectId={selectedProject.id}
        currentUserId={currentUserId}
        userRole={selectedProject.role}
        onInviteClick={() => {
          setIsMembersOpen(false);
          setIsInviteModalOpen(true);
        }}
        onMemberRoleChanged={() => {
          // Refresh project details to show updated roles
          if (selectedProject.id !== 'chat' && 
              selectedProject.id !== 'loading' && 
              selectedProject.id !== 'no-projects' && 
              selectedProject.id !== 'error' && 
              selectedProject.id) {
            loadProjectDetails(selectedProject.id);
          }
        }}
      />

      {/* Invite Members Modal */}
      <InviteMembersModal
        isOpen={isInviteModalOpen}
        onClose={() => setIsInviteModalOpen(false)}
        projectId={selectedProject.id}
        projectName={selectedProject.name}
        currentMembers={projectDetails?.members || []}
        onMembersInvited={() => {
          // Refresh project details to show new members
          if (selectedProject.id !== 'chat' && 
              selectedProject.id !== 'loading' && 
              selectedProject.id !== 'no-projects' && 
              selectedProject.id !== 'error' && 
              selectedProject.id) {
            loadProjectDetails(selectedProject.id);
          }
        }}
      />

      <style>{`
        .line-clamp-1 {
          display: -webkit-box;
          -webkit-line-clamp: 1;
          -webkit-box-orient: vertical;
          overflow: hidden;
        }
        .line-clamp-2 {
          display: -webkit-box;
          -webkit-line-clamp: 2;
          -webkit-box-orient: vertical;
          overflow: hidden;
        }
      `}</style>
    </div>
  );
};

export default CollapsibleSidebar; 